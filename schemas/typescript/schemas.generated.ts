// Generated by ts-to-zod
import { z } from "zod";

export const addressSchema = z
  .string()
  .regex(/^0x[a-fA-F0-9]{40}(@eip155:[0-9]+#[a-fA-F0-9]{8})?$/)
  .describe(
    "ERC-7930 interoperable address format (address@chain#checksum or plain Ethereum address)",
  );

export const amountSchema = z
  .string()
  .regex(/^[0-9]+$/)
  .describe(
    "Integer encoded as a string to preserve precision (e.g., uint256)",
  );

export const assetLockReferenceSchema = z.object({
  kind: z.union([z.literal("the-compact"), z.literal("rhinestone")]),
  params: z.record(z.unknown()).optional(),
});

export const originSubmissionSchema = z.object({
  mode: z.union([z.literal("user"), z.literal("protocol")]),
  schemes: z
    .array(
      z.union([
        z.literal("erc-4337"),
        z.literal("permit2"),
        z.literal("erc20-permit"),
        z.literal("eip-3009"),
      ]),
    )
    .optional(),
});

export const availableInputSchema = z.object({
  user: addressSchema,
  asset: addressSchema,
  amount: amountSchema,
  lock: assetLockReferenceSchema.optional(),
});

export const requestedOutputSchema = z.object({
  receiver: addressSchema,
  asset: addressSchema,
  amount: amountSchema,
  calldata: z.string().optional(),
});

export const requestedOutputDetailsSchema = z.object({
  user: addressSchema,
  asset: addressSchema,
  amount: amountSchema,
  calldata: z.string().optional(),
});

export const quotePreferenceSchema = z
  .union([
    z.literal("price"),
    z.literal("speed"),
    z.literal("input-priority"),
    z.literal("trust-minimization"),
  ])
  .describe("Quote preference type");

export const failureHandlingModeSchema = z.union([
  z.literal("retry"),
  z.literal("refund-instant"),
  z.literal("refund-claim"),
  z.literal("needs-new-signature"),
]);

export const failureHandlingSchema = z.union([
  failureHandlingModeSchema,
  z.object({
    partialFill: z.boolean().optional(),
    remainder: failureHandlingModeSchema,
  }),
]);

export const getQuoteRequestSchema = z.object({
  user: addressSchema,
  availableInputs: z.array(availableInputSchema),
  requestedOutputs: z.array(requestedOutputSchema),
  minValidUntil: z.number().optional(),
  preference: quotePreferenceSchema.optional(),
  originSubmission: originSubmissionSchema.optional(),
  fillerPerformsOpen: z.boolean().optional(),
});

export const eip712OrderSchema = z.object({
  domain: addressSchema,
  primaryType: z.string(),
  message: z.record(z.unknown()),
});

export const quoteDetailsSchema = z.object({
  requestedOutputs: z.array(requestedOutputDetailsSchema),
  availableInputs: z.array(
    z.object({
      user: addressSchema,
      asset: addressSchema,
      amount: amountSchema,
      lockType: z.literal("the-compact").optional(),
    }),
  ),
});

export const quoteSchema = z.object({
  orders: z.array(eip712OrderSchema),
  details: quoteDetailsSchema,
  validUntil: z.number().optional(),
  eta: z.number().optional(),
  quoteId: z.string(),
  provider: z.string(),
});

export const getQuoteResponseSchema = z.object({
  quotes: z.array(quoteSchema),
});

export const intentRequestSchema = z.object({
  order: z.record(z.unknown()),
  signature: z.record(z.unknown()),
  quoteId: z.string().optional(),
  provider: z.string(),
  failureHandling: failureHandlingSchema,
  originSubmission: originSubmissionSchema.optional(),
});

export const intentResponseSchema = z.object({
  orderId: z.string().optional(),
  status: z.string(),
  message: z.string().optional(),
  order: z.record(z.unknown()).optional(),
});
